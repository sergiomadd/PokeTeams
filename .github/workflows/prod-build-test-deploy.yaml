name: Prod Build, Test and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_HOST: ${{ secrets.AWS_HOST }}
      AWS_USERNAME: ${{ secrets.AWS_USERNAME }}
      DEPLOY_PATH_API: ${{ secrets.DEPLOY_PATH_API }}
      DEPLOY_PATH_UI: ${{ secrets.DEPLOY_PATH_UI }}
      AWS_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: poketeam
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 3
          done

      - name: Test
        env:
          ASPNETCORE_ENVIRONMENT: Test
          ConnectionStrings__PostgrePoketeamTest: Host=localhost;Port=5432;Database=poketeam;Username=postgres;Password=postgres
          JWT__SECRET: ${{ secrets.JWT__SECRET }}
        run: dotnet test ./api.Test/api.Test.csproj --verbosity normal

      - name: Publish
        if: success()
        run: dotnet publish ./api/api.csproj --configuration Release --output ./api/bin/Release/net9.0/publish

      - name: Deploy to AWS EC2
        if: success()
        run: |
          printf "%s" "$AWS_SSH_KEY" > key.pem
          chmod 600 key.pem

          echo "Cleaning remote directory (except wwwroot)..."
          ssh -o StrictHostKeyChecking=no -i key.pem $AWS_USERNAME@$AWS_HOST << EOF
            find $DEPLOY_PATH_API -mindepth 1 -maxdepth 1 ! -name 'wwwroot' -exec rm -rf {} +
          EOF

          echo "Uploading files (excluding wwwroot)..."
          rsync -avz --exclude='wwwroot' -e "ssh -i key.pem -o StrictHostKeyChecking=no" \
            ./api/bin/Release/net9.0/publish/ $AWS_USERNAME@$AWS_HOST:$DEPLOY_PATH_API

          echo "Restarting service..."
          ssh -o StrictHostKeyChecking=no -i key.pem $AWS_USERNAME@$AWS_HOST << EOF
            sudo systemctl restart poketeams-api-service.service
          EOF
        shell: bash

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Angular dependencies
        working-directory: ./ui
        run: npm ci

      - name: Build Angular app
        working-directory: ./ui
        run: npm run build --prod

      - name: Deploy Angular to EC2
        run: |
          printf "%s" "$AWS_SSH_KEY" > key.pem
          chmod 600 key.pem

          echo "Cleaning remote Angular directory..."
          ssh -o StrictHostKeyChecking=no -i key.pem $AWS_USERNAME@$AWS_HOST << EOF
            rm -rf $DEPLOY_PATH_UI/*
          EOF

          echo "Uploading Angular build..."
          rsync -avz --delete -e "ssh -i key.pem -o StrictHostKeyChecking=no" \
            ./ui/dist/ui/ $AWS_USERNAME@$AWS_HOST:$DEPLOY_PATH_UI

          echo "Reloading Nginx"
          ssh -o StrictHostKeyChecking=no -i key.pem $AWS_USERNAME@$AWS_HOST << EOF
            sudo service nginx restart
          EOF
